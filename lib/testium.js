// Generated by CoffeeScript 1.8.0
var Assertions, Browser, WebDriver, applyMixin, applyMixins, assert, cachedDriver, clone, config, debug, each, extend, getBrowser, path, processes, _ref;

path = require('path');

assert = require('assertive');

debug = require('debug')('testium:testium');

_ref = require('lodash'), each = _ref.each, extend = _ref.extend, clone = _ref.clone;

config = require('./config');

Browser = require('./browser');

Assertions = require('./assert');

processes = require('./processes')();

WebDriver = require('webdriver-http-sync');

applyMixin = function(obj, mixin) {
  return extend(obj, mixin);
};

applyMixins = function(obj, mixins) {
  if (mixins == null) {
    mixins = [];
  }
  return each(mixins, function(mixin) {
    var mixinFile;
    debug('Applying mixin to %s', obj.constructor.name, mixin);
    mixinFile = path.resolve(process.cwd(), mixin);
    return applyMixin(obj, require(mixinFile));
  });
};

cachedDriver = null;

getBrowser = function(options, done) {
  var reuseSession, _ref1;
  if (typeof options === 'function') {
    done = options;
    options = {};
  }
  reuseSession = (_ref1 = options.reuseSession) != null ? _ref1 : true;
  assert.hasType('getBrowser requires a callback, please check the docs for breaking changes', Function, done);
  return processes.ensureRunning(config, (function(_this) {
    return function(err, results) {
      var createBrowser, createDriver, phantom, proxy;
      if (err != null) {
        return done(err);
      }
      phantom = results.phantom, proxy = results.proxy;
      createDriver = function() {
        var desiredCapabilities, driverUrl;
        driverUrl = "" + phantom.baseUrl + "/wd/hub";
        desiredCapabilities = {
          browserName: 'phantomjs',
          'phantomjs.page.settings.resourceTimeout': 2500
        };
        debug('WebDriver(%j)', driverUrl, desiredCapabilities);
        return cachedDriver = new WebDriver(driverUrl, desiredCapabilities);
      };
      createBrowser = function() {
        var browser, driver, useCachedDriver, _ref2, _ref3;
        useCachedDriver = reuseSession && (cachedDriver != null);
        driver = useCachedDriver ? cachedDriver : createDriver();
        browser = new Browser(driver, proxy.baseUrl, 'http://127.0.0.1:4446');
        if (!useCachedDriver) {
          browser.navigateTo('/testium-priming-load');
          debug('Browser was primed');
        } else {
          debug('Browser was already primed');
        }
        debug('Clearing cookies for clean state');
        browser.clearCookies();
        browser.setPageSize({
          height: 768,
          width: 1024
        });
        applyMixins(browser, (_ref2 = config.mixins) != null ? _ref2.browser : void 0);
        applyMixins(browser.assert, (_ref3 = config.mixins) != null ? _ref3.assert : void 0);
        return browser;
      };
      return done(null, createBrowser());
    };
  })(this));
};

exports.getBrowser = getBrowser;

exports.Browser = Browser;

exports.Assertions = Assertions;
