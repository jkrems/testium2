// Generated by CoffeeScript 1.8.0
var NO_LAUNCH_COMMAND_ERROR, async, debug, defaults, findOpenPort, getLaunchCommand, initLogs, isAvailable, readPackageJson, spawnApplication, spawnServer, _ref;

async = require('async');

readPackageJson = require('read-package-json');

debug = require('debug')('testium:processes:application');

defaults = require('lodash').defaults;

spawnServer = require('../server').spawnServer;

_ref = require('../port'), findOpenPort = _ref.findOpenPort, isAvailable = _ref.isAvailable;

initLogs = require('../../logs');

NO_LAUNCH_COMMAND_ERROR = 'Not launch command found, please add scripts.start to package.json';

getLaunchCommand = function(config, callback) {
  var pkgJsonPath;
  if (config.launchCommand) {
    return callback(null, config.launchCommand);
  }
  debug('Trying to use package.json:scripts.start');
  pkgJsonPath = "" + config.appDirectory + "/package.json";
  return readPackageJson(pkgJsonPath, function(error, pkgJson) {
    var _ref1, _ref2;
    if (error != null) {
      return callback(error);
    }
    debug('Loaded from package json', (_ref1 = pkgJson.scripts) != null ? _ref1.start : void 0);
    if (!((_ref2 = pkgJson.scripts) != null ? _ref2.start : void 0)) {
      return cb(new Error(NO_LAUNCH_COMMAND_ERROR));
    }
    return callback(null, pkgJson.scripts.start);
  });
};

spawnApplication = function(config, callback) {
  var launch, logs, timeout;
  launch = config.launch, timeout = config.launchTimeout;
  if (!launch) {
    return isAvailable(config.appPort, function(error, available) {
      if (!available) {
        return callback();
      }
      return callback(new Error("App not listening on " + config.appPort));
    });
  }
  logs = initLogs(config);
  return async.auto({
    port: function(done) {
      var port;
      port = config.appPort;
      return isAvailable(port, function(error, available) {
        if (available) {
          return done(null, port);
        }
        return done(new Error("Something is already listening on " + port));
      });
    },
    launchCommand: function(done) {
      return getLaunchCommand(config, done);
    },
    app: [
      'port', 'launchCommand', function(done, _arg) {
        var args, cmd, env, launchCommand, opts, port;
        port = _arg.port, launchCommand = _arg.launchCommand;
        args = launchCommand.split(/[\s]+/g);
        cmd = args.shift();
        debug('Launching application', cmd, args);
        env = defaults({
          NODE_ENV: 'test',
          PORT: port,
          PATH: "./node_modules/.bin:" + process.env.PATH
        }, process.env);
        opts = {
          port: port,
          env: env,
          timeout: timeout
        };
        return spawnServer(logs, 'application', cmd, args, opts, done);
      }
    ]
  }, function(error, _arg) {
    var app;
    app = _arg.app;
    return callback(error, app);
  });
};

module.exports = spawnApplication;
