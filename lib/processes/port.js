// Generated by CoffeeScript 1.8.0
var createServer, findOpenPort, isAvailable, portscanner, procError, waitFor;

createServer = require('net').createServer;

portscanner = require('portscanner');

isAvailable = function(port, callback) {
  return portscanner.checkPortStatus(port, '127.0.0.1', function(error, status) {
    if (error != null) {
      return callback(error);
    }
    return callback(null, status === 'closed');
  });
};

procError = function(proc) {
  var message, _ref;
  message = "Process \"" + proc.name + "\" crashed. See log at: " + proc.logPath + ".";
  if (((_ref = proc.error) != null ? _ref.length : void 0) > 0) {
    message += "\n" + (proc.error.trim());
  }
  return new Error(message);
};

waitFor = function(proc, port, timeout, callback) {
  var check, error, startTime;
  if (!proc.pid) {
    error = procError(proc);
    return callback(error);
  }
  startTime = Date.now();
  check = function() {
    return portscanner.checkPortStatus(port, '127.0.0.1', function(error, status) {
      var timedOut;
      if (error != null) {
        console.error(error.stack);
      }
      if (!proc.pid) {
        error = procError(proc);
        return callback(error);
      }
      if ((error != null) || status === 'closed') {
        if ((Date.now() - startTime) >= timeout) {
          timedOut = true;
          return callback(null, timedOut);
        }
        return setTimeout(check, 100);
      } else {
        return callback();
      }
    });
  };
  return check();
};

findOpenPort = function(callback) {
  var server;
  server = createServer();
  server.on('error', callback);
  return server.listen(0, function() {
    var port;
    port = this.address().port;
    server.on('close', function() {
      return callback(null, port);
    });
    return server.close();
  });
};

module.exports = {
  isAvailable: isAvailable,
  waitFor: waitFor,
  findOpenPort: findOpenPort
};
