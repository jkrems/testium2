// Generated by CoffeeScript 1.8.0
var debug, extend, omit, spawn, spawnServer, waitFor, _ref;

spawn = require('child_process').spawn;

_ref = require('lodash'), extend = _ref.extend, omit = _ref.omit;

debug = require('debug')('testium:processes');

waitFor = require('./port').waitFor;

spawnServer = function(logs, name, cmd, args, opts, cb) {
  var port, timeout;
  port = opts.port, timeout = opts.timeout;
  if (timeout == null) {
    timeout = 1000;
  }
  return logs.openLogFile(name, 'w+', function(error, results) {
    var child, logHandle, logPath, spawnOpts;
    if (error != null) {
      return cb(error);
    }
    logHandle = results.fd, logPath = results.filename;
    spawnOpts = extend({
      stdio: ['ignore', logHandle, logHandle]
    }, omit(opts, 'port', 'timeout'));
    child = spawn(cmd, args, spawnOpts);
    child.baseUrl = "http://127.0.0.1:" + port;
    child.logPath = logPath;
    child.logHandle = logHandle;
    child.name = name;
    process.on('exit', function() {
      var err;
      try {
        return child.kill('SIGINT');
      } catch (_error) {
        err = _error;
        return console.error(err.stack);
      }
    });
    process.on('uncaughtException', function(error) {
      var err;
      try {
        child.kill('SIGINT');
      } catch (_error) {
        err = _error;
        console.error(err.stack);
      }
      throw error;
    });
    debug('start %s on port %s', name, port);
    return waitFor(child, port, timeout, function(error) {
      debug('started %s', name, error);
      if (error != null) {
        return cb(error);
      }
      return cb(null, child);
    });
  });
};

module.exports = {
  spawnServer: spawnServer
};
