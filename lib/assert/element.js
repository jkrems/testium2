// Generated by CoffeeScript 1.8.0
var ElementMixin, assert, getProperty, isRegExp, isString, isTextOrRegexp, _ref;

assert = require('assertive');

_ref = require('lodash'), isString = _ref.isString, isRegExp = _ref.isRegExp;

isTextOrRegexp = function(textOrRegExp) {
  return isString(textOrRegExp) || isRegExp(textOrRegExp);
};

getProperty = function(driver, selector, property) {
  var count, element, elements;
  elements = driver.getElements(selector);
  count = elements.length;
  if (count === 0) {
    throw new Error("Element not found for selector: " + selector);
  }
  if (count !== 1) {
    throw new Error("assertion needs a unique selector!\n" + selector + " has " + count + " hits in the page");
  }
  element = elements[0];
  return [element, element.get(property)];
};

ElementMixin = {
  elementHasText: function(selector, textOrRegExp) {
    var actualText, doc, element, _ref1;
    if (arguments.length === 3) {
      doc = arguments[0], selector = arguments[1], textOrRegExp = arguments[2];
      assert.truthy('elementHasText(docstring, selector, textOrRegExp) - requires docstring', isString(doc));
    } else {
      doc = "elementHasText: " + selector;
    }
    assert.truthy('elementHasText(selector, textOrRegExp) - requires selector', isString(selector));
    assert.truthy('elementHasText(selector, textOrRegExp) - requires textOrRegExp', isTextOrRegexp(textOrRegExp));
    _ref1 = getProperty(this.driver, selector, 'text'), element = _ref1[0], actualText = _ref1[1];
    if (textOrRegExp === '') {
      assert.equal(textOrRegExp, actualText);
    } else {
      assert.include(doc, textOrRegExp, actualText);
    }
    return element;
  },
  elementLacksText: function(selector, textOrRegExp) {
    var actualText, doc, element, _ref1;
    if (arguments.length === 3) {
      doc = arguments[0], selector = arguments[1], textOrRegExp = arguments[2];
      assert.truthy('elementLacksText(docstring, selector, textOrRegExp) - requires docstring', isString(doc));
    } else {
      doc = "elementLacksText: " + selector;
    }
    assert.truthy('elementLacksText(selector, textOrRegExp) - requires selector', isString(selector));
    assert.truthy('elementLacksText(selector, textOrRegExp) - requires textOrRegExp', isTextOrRegexp(textOrRegExp));
    _ref1 = getProperty(this.driver, selector, 'text'), element = _ref1[0], actualText = _ref1[1];
    assert.notInclude(doc, textOrRegExp, actualText);
    return element;
  },
  elementHasValue: function(selector, textOrRegExp) {
    var actualValue, doc, element, _ref1;
    if (arguments.length === 3) {
      doc = arguments[0], selector = arguments[1], textOrRegExp = arguments[2];
      assert.truthy('elementHasValue(docstring, selector, textOrRegExp) - requires docstring', isString(doc));
    } else {
      doc = "elementHasValue: " + selector;
    }
    assert.truthy('elementHasValue(selector, textOrRegExp) - requires selector', isString(selector));
    assert.truthy('elementHasValue(selector, textOrRegExp) - requires textOrRegExp', isTextOrRegexp(textOrRegExp));
    _ref1 = getProperty(this.driver, selector, 'value'), element = _ref1[0], actualValue = _ref1[1];
    if (textOrRegExp === '') {
      assert.equal(textOrRegExp, actualValue);
    } else {
      assert.include(doc, textOrRegExp, actualValue);
    }
    return element;
  },
  elementLacksValue: function(selector, textOrRegExp) {
    var actualValue, doc, element, _ref1;
    if (arguments.length === 3) {
      doc = arguments[0], selector = arguments[1], textOrRegExp = arguments[2];
      assert.truthy('elementLacksValue(docstring, selector, textOrRegExp) - requires docstring', isString(doc));
    } else {
      doc = "elementLacksValue: " + selector;
    }
    assert.truthy('elementLacksValue(selector, textOrRegExp) - requires selector', isString(selector));
    assert.truthy('elementLacksValue(selector, textOrRegExp) - requires textOrRegExp', isTextOrRegexp(textOrRegExp));
    _ref1 = getProperty(this.driver, selector, 'value'), element = _ref1[0], actualValue = _ref1[1];
    assert.notInclude(doc, textOrRegExp, actualValue);
    return element;
  },
  elementIsVisible: function(selector) {
    var element;
    assert.hasType('elementIsVisible(selector) - requires (String) selector', String, selector);
    element = this.browser.getElementWithoutError(selector);
    assert.truthy("Element not found for selector: " + selector, element);
    assert.truthy("Element should be visible for selector: " + selector, element.isVisible());
    return element;
  },
  elementNotVisible: function(selector) {
    var element;
    assert.hasType('elementNotVisible(selector) - requires (String) selector', String, selector);
    element = this.browser.getElementWithoutError(selector);
    assert.truthy("Element not found for selector: " + selector, element);
    assert.falsey("Element should not be visible for selector: " + selector, element.isVisible());
    return element;
  },
  elementExists: function(selector) {
    var element;
    assert.hasType('elementExists(selector) - requires (String) selector', String, selector);
    element = this.browser.getElementWithoutError(selector);
    assert.truthy("Element not found for selector: " + selector, element);
    return element;
  },
  elementDoesntExist: function(selector) {
    var element;
    assert.hasType('elementDoesntExist(selector) - requires (String) selector', String, selector);
    element = this.browser.getElementWithoutError(selector);
    return assert.falsey("Element found for selector: " + selector, element);
  }
};

module.exports = ElementMixin;
