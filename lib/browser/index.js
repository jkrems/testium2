// Generated by CoffeeScript 1.8.0
var Assertions, Browser, extend, hasType, truthy, _ref,
  __slice = [].slice;

extend = require('lodash').extend;

_ref = require('assertive'), truthy = _ref.truthy, hasType = _ref.hasType;

Assertions = require('../assert');

Browser = (function() {
  function Browser(driver, proxyUrl, commandUrl) {
    this.driver = driver;
    this.proxyUrl = proxyUrl;
    this.commandUrl = commandUrl;
    this.assert = new Assertions(this.driver, this);
  }

  Browser.prototype.close = function(callback) {
    hasType('close(callback) - requires (Function) callback', Function, callback);
    this.driver.close();
    return callback();
  };

  Browser.prototype.evaluate = function(clientFunction) {
    var args, invocation, _i;
    if (arguments.length > 1) {
      args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), clientFunction = arguments[_i++];
    }
    invocation = 'evaluate(clientFunction) - requires (Function|String) clientFunction';
    truthy(invocation, clientFunction);
    if (typeof clientFunction === 'function') {
      args = JSON.stringify(args != null ? args : []);
      clientFunction = "return (" + clientFunction + ").apply(this, " + args + ");";
    } else if (typeof clientFunction !== 'string') {
      throw new Error(invocation);
    }
    return this.driver.evaluate(clientFunction);
  };

  return Browser;

})();

[require('./cookie'), require('./element'), require('./navigation'), require('./page')].forEach(function(mixin) {
  return extend(Browser.prototype, mixin);
});

module.exports = Browser;
