// Generated by CoffeeScript 1.8.0
var CookieMixin, decode, find, getTestiumCookie, hasType, parseTestiumCookie, reject, removeTestiumCookie, tryParse, validateCookie, _ref;

_ref = require('lodash'), find = _ref.find, reject = _ref.reject;

hasType = require('assertive').hasType;

tryParse = require('./json').tryParse;

decode = function(value) {
  return (new Buffer(value, 'base64')).toString('utf8');
};

parseTestiumCookie = function(cookie) {
  var value;
  value = decode(cookie.value);
  return tryParse(value);
};

getTestiumCookie = function(cookies) {
  var testiumCookie;
  testiumCookie = find(cookies, {
    name: '_testium_'
  });
  if (testiumCookie == null) {
    throw new Error('Unable to communicate with internal proxy. Make sure you are using relative paths.');
  }
  return parseTestiumCookie(testiumCookie);
};

removeTestiumCookie = function(cookies) {
  return reject(cookies, {
    name: '_testium_'
  });
};

validateCookie = function(invocation, cookie) {
  hasType("" + invocation + " - cookie must be an object", Object, cookie);
  if (!cookie.name) {
    throw new Error("" + invocation + " - cookie must contain `name`");
  }
  if (!cookie.value) {
    throw new Error("" + invocation + " - cookie must contain `value`");
  }
};

CookieMixin = {
  setCookie: function(cookie) {
    validateCookie('setCookie(cookie)', cookie);
    return this.driver.setCookie(cookie);
  },
  setCookies: function(cookies) {
    var cookie, _i, _len;
    for (_i = 0, _len = cookies.length; _i < _len; _i++) {
      cookie = cookies[_i];
      this.setCookie(cookie);
    }
    return this;
  },
  getCookie: function(name) {
    var cookies;
    hasType('getCookie(name) - requires (String) name', String, name);
    cookies = this.driver.getCookies();
    return find(cookies, {
      name: name
    });
  },
  getCookies: function() {
    return removeTestiumCookie(driver.getCookies());
  },
  clearCookies: function() {
    return this.driver.clearCookies();
  },
  _getTestiumCookieField: function(name) {
    var cookies, testiumCookie;
    cookies = this.driver.getCookies();
    testiumCookie = getTestiumCookie(cookies);
    return testiumCookie != null ? testiumCookie[name] : void 0;
  },
  getStatusCode: function() {
    return this._getTestiumCookieField('statusCode');
  },
  getHeaders: function() {
    return this._getTestiumCookieField('headers');
  },
  getHeader: function(name) {
    hasType('getHeader(name) - require (String) name', String, name);
    return this.getHeaders()[name];
  }
};

module.exports = CookieMixin;
