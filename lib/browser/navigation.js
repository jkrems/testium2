// Generated by CoffeeScript 1.8.0
var NavigationMixin, urlParse, waitFor;

urlParse = require('url').parse;

waitFor = require('./wait');

NavigationMixin = {
  navigateTo: function(url, options) {
    var currentUrl, hasProtocol;
    if (options == null) {
      options = {};
    }
    options.url = url;
    hasProtocol = /^[^:\/?#]+:\/\//;
    if (!hasProtocol.test(url)) {
      url = "" + this.proxyUrl + url;
    }
    this.driver.http.post("" + this.commandUrl + "/new-page", options);
    currentUrl = this.driver.getUrl();
    if (currentUrl === url) {
      this.driver.refresh();
    } else {
      this.driver.navigateTo(url);
    }
    return this.driver.rootWindow = this.driver.getCurrentWindowHandle();
  },
  refresh: function() {
    return this.driver.refresh();
  },
  getUrl: function() {
    return this.driver.getUrl();
  },
  getPath: function() {
    var url;
    url = this.driver.getUrl();
    return urlParse(url).path;
  },
  waitForUrl: function(url, query, timeout) {
    if (typeof query === 'number') {
      timeout = query;
    } else if (isObject(query)) {
      url = makeUrlRegExp(url, query);
    }
    return waitFor(url, 'Url', ((function(_this) {
      return function() {
        return _this.driver.getUrl();
      };
    })(this)), timeout != null ? timeout : 5000);
  },
  waitForPath: function(url, timeout) {
    if (timeout == null) {
      timeout = 5000;
    }
    return waitFor(url, 'Path', ((function(_this) {
      return function() {
        return _this.getPath();
      };
    })(this)), timeout);
  }
};

module.exports = NavigationMixin;
